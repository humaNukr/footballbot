import aiomysql
import os
from dotenv import load_dotenv
import asyncio
from urllib.parse import urlparse

load_dotenv()

# –ü–∞—Ä—Å–∏–º–æ DATABASE_URL –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–∫—Ä–µ–º—ñ –∑–º—ñ–Ω–Ω—ñ
DATABASE_URL = os.getenv("DATABASE_URL")

if DATABASE_URL:
    parsed = urlparse(DATABASE_URL)
    DB_HOST = parsed.hostname
    DB_USER = parsed.username  
    DB_PASS = parsed.password
    DB_NAME = parsed.path[1:]  # –±–µ–∑ –ø–µ—Ä—à–æ–≥–æ —Å–ª–µ—à–∞
    DB_PORT = parsed.port or 3306
    print(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é DATABASE_URL –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL")
    print(f"üîó Host: {DB_HOST}:{DB_PORT}")
    print(f"üóÑÔ∏è  Database: {DB_NAME}")
else:
    # Fallback –Ω–∞ –æ–∫—Ä–µ–º—ñ –∑–º—ñ–Ω–Ω—ñ
    DB_HOST = os.getenv("DB_HOST")
    DB_USER = os.getenv("DB_USER") 
    DB_PASS = os.getenv("DB_PASS")
    DB_NAME = os.getenv("DB_NAME")
    DB_PORT = int(os.getenv("DB_PORT", 3306))
    print(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –æ–∫—Ä–µ–º—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL")

class Database:
    def __init__(self):
        self.pool = None

    async def connect(self):
        print(f"üöÄ –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL...")
        print(f"üì° –•–æ—Å—Ç: {DB_HOST}:{DB_PORT}")
        print(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {DB_USER}")
        print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {DB_NAME}")
        
        for i in range(10):  # 10 —Å–ø—Ä–æ–±
            try:
                self.pool = await aiomysql.create_pool(
                    host=DB_HOST,
                    port=DB_PORT,
                    user=DB_USER,
                    password=DB_PASS,
                    db=DB_NAME,
                    autocommit=True,
                    charset='utf8mb4',
                    init_command="SET time_zone = 'Europe/Kiev'"  # –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å
                )
                print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MySQL!")
                return
            except Exception as e:
                print(f"üîÅ [{i+1}/10] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
                await asyncio.sleep(3)
        raise Exception("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ MySQL –ø—ñ—Å–ª—è 10 —Å–ø—Ä–æ–±.")

    async def close(self):
        if self.pool:
            self.pool.close()
            await self.pool.wait_closed()


    async def execute(self, query, params=None):
        async with self.pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute(query, params or ())
                return cur

    async def fetchall(self, query, params=None):
        async with self.pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute(query, params or ())
                result = await cur.fetchall()
                return result

    async def fetchone(self, query, params=None):
        async with self.pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute(query, params or ())
                result = await cur.fetchone()
                return result