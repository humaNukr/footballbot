from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.db.database import Database
from app.db.models import log_broadcast, get_all_users, get_admins
from app.keyboards.inline import admin_back, admin_main_menu


async def push_calendar_update(message: Message, state: FSMContext, db: Database):
    broadcast_text = "üìÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ —ñ–≥–æ—Ä! üòç"
    users = await get_all_users(db)

    non_admin_users = [user for user in users if not user[3]]

    if not users:
        await state.clear()
        return

    failed_count = 0

    for user in non_admin_users:
        telegram_id = user[0]
        try:
            await message.bot.send_message(telegram_id, broadcast_text)
        except Exception as e:
            print(f"[ERROR] Failed to send message to {telegram_id}: {e}")
            failed_count += 1

    result_text = "‚úÖ <b>–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É!</b>"

    await message.answer(result_text)
    await state.clear()


async def push_feedback_update(message: Message, state: FSMContext, db: Database):
    feedback_text = "‚úèÔ∏è –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –≤—ñ–¥–≥—É–∫!"
    admins = await get_admins(db)

    if not admins:
        await state.clear()
        return

    for user in admins:
        telegram_id = user[0]
        try:
            await message.bot.send_message(telegram_id, feedback_text)
        except Exception as e:
            print(f"[ERROR] Failed to send message to {telegram_id}: {e}")
    await state.clear()


async def push_users_db_update(message: Message, state: FSMContext, db: Database,
                               telegram_id=None, username=None, first_name=None):

    admins = await get_admins(db)

    register_text = ("üë§ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π! –ô–æ–≥–æ –¥–∞–Ω—ñ: \n\n"
                     "ID: <code>{telegram_id}</code>\n"
                     "Username: @{username}\n"
                     "First name: {first_name}").format(telegram_id=telegram_id, username=username, first_name=first_name)

    if not admins:
        await state.clear()
        return

    for user in admins:
        telegram_id = user[0]
        try:
            await message.bot.send_message(telegram_id, register_text)
        except Exception as e:
            print(f"[ERROR] Failed to send message to {telegram_id}: {e}")
    await state.clear()


async def send_to_admins(bot, db: Database, text: str):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω–∞–º
    """
    admins = await get_admins(db)

    for admin in admins:
        admin_id = admin[0]
        try:
            await bot.send_message(admin_id, text)
        except Exception as e:
            print(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É {admin_id}: {e}")


async def send_match_notifications(bot, db: Database):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–∞—Ç—á—ñ —ñ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑–≥—ñ–¥–Ω–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    """
    from datetime import datetime, timedelta
    import pytz
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (30, 60, 120 —Ö–≤–∏–ª–∏–Ω)
    notification_times = [30, 60, 120]
    
    kyiv_tz = pytz.timezone('Europe/Kiev')
    current_time = datetime.now(kyiv_tz)
    
    print(f"üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –º–∞—Ç—á—ñ –æ {current_time.strftime('%H:%M:%S')}")
    
    total_sent = 0
    
    for minutes_before in notification_times:
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –º–∞—Ç—á—É, –¥–ª—è —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        target_match_time = current_time + timedelta(minutes=minutes_before)
        
        # –®—É–∫–∞—î–º–æ –º–∞—Ç—á—ñ, —è–∫—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω (¬±2 —Ö–≤–∏–ª–∏–Ω–∏)
        start_window = target_match_time - timedelta(minutes=2)
        end_window = target_match_time + timedelta(minutes=2)
        
        match_query = """
                SELECT s.id, s.date, s.time, s.message, s.first_name
                FROM schedule s
                WHERE (s.date + s.time)::timestamp BETWEEN $1 AND $2
                AND s.date >= CURRENT_DATE
                ORDER BY s.date, s.time
                """
        
        matches = await db.fetchall(match_query, (
            start_window.strftime("%Y-%m-%d %H:%M:%S"),
            end_window.strftime("%Y-%m-%d %H:%M:%S")
        ))
        
        for match_id, date, time_str, match_message, organizer in matches:
            print(f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á: {date} {time_str} (–∑–∞ {minutes_before} —Ö–≤)")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤
            participants_query = """
                    SELECT DISTINCT r.telegram_id, u.first_name
                    FROM registrations r
                    JOIN users u ON u.telegram_id = r.telegram_id
                    WHERE r.match_id = $1 
                    AND (r.message IS NULL OR r.message = '')
                    """
            
            participants = await db.fetchall(participants_query, (match_id,))
            
            if not participants:
                print(f"   ‚ÑπÔ∏è –ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è –º–∞—Ç—á—É {match_id}")
                continue
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            try:
                date_obj = datetime.strptime(str(date), "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                day_name = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"][date_obj.weekday()]
            except:
                formatted_date = str(date)
                day_name = ""
            
            notification_text = f"üîî <b>–ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø –ü–†–û –ú–ê–¢–ß!</b>\n\n"
            notification_text += f"‚ö° –ú–∞—Ç—á –ø–æ—á–Ω–µ—Ç—å—Å—è —á–µ—Ä–µ–∑ {minutes_before} —Ö–≤–∏–ª–∏–Ω!\n\n"
            notification_text += f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date} ({day_name})\n"
            notification_text += f"üïê <b>–ß–∞—Å:</b> {time_str}\n"
            notification_text += f"üë®‚Äçüíº <b>–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä:</b> {organizer}\n"
            if match_message:
                notification_text += f"üìã <b>–î–µ—Ç–∞–ª—ñ:</b> {match_message}\n"
            notification_text += f"\n‚öΩ –ì–æ—Ç—É–π—Ç–µ—Å—è –¥–æ –≥—Ä–∏!"
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º
            sent_count = 0
            failed_count = 0
            
            for telegram_id, first_name in participants:
                try:
                    await bot.send_message(telegram_id, notification_text)
                    print(f"   ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {first_name} ({telegram_id})")
                    sent_count += 1
                except Exception as e:
                    print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {first_name} ({telegram_id}): {e}")
                    failed_count += 1
            
            total_sent += sent_count
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {sent_count} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, {failed_count} –ø–æ–º–∏–ª–æ–∫")
    
    if total_sent > 0:
        print(f"üéØ –ó–∞–≥–∞–ª–æ–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {total_sent} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
    else:
        print("‚ÑπÔ∏è –ñ–æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")


