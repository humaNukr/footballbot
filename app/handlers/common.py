from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from app.db.database import Database
from app.keyboards.inline import faq_main_menu
from app.db.models import add_user, save_feedback

from app.keyboards.inline import back_to_menu
from app.keyboards.reply import start_keyboard

from app.keyboards.reply import get_main_panel
from app.states.register import FeedbackStates

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —â–æ –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—è –∑ –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ ‚öΩ",
        reply_markup=start_keyboard
    )

@router.message(F.text == "üöÄ –ü–æ–≥–æ–¥–∂—É—é—Å—è")
async def process_start_button(message: Message, is_registered: bool, is_admin: bool):
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:",
        reply_markup=get_main_panel(is_registered, is_admin)
    )

#FAQ LOGIC
@router.message(F.text == "‚ùì FAQ")
async def show_faq_menu(message: Message):
    await message.answer(
        "–¶–µ —Ä–æ–∑–¥—ñ–ª–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏—Ö –ø–∏—Ç–∞–Ω—å ‚ùó")

    keyboard = faq_main_menu()

    await message.answer("‚ùì <b>–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª:</b>", reply_markup=keyboard)


# –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback-–∏
@router.callback_query(F.data == "faq_about")
async def faq_about(callback: CallbackQuery):
    await callback.message.edit_text(
        "ü§ñ <b>–î–ª—è —á–æ–≥–æ —Ü–µ–π –±–æ—Ç?</b>\n\n"
        "–©–æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ —Ñ—É—Ç–±–æ–ª—å–Ω—ñ –º–∞—Ç—á—ñ. "
        "–ë–æ—Ç —Ä–æ–∑—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —ñ —Ä–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤.",
        reply_markup=back_to_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "faq_matches")
async def faq_matches(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìÖ <b>–ö–æ–ª–∏ –±—É–¥–µ –Ω–∞—Å—Ç—É–ø–Ω–∞ –≥—Ä–∞?</b>\n\n"
        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–º –≤–∏—Ä—ñ—à—É—î —ñ –∑–∞–ø—É—Å–∫–∞—î —Ä–æ–∑—Å–∏–ª–∫—É. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –∑–º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —É—á–∞—Å—Ç—å.",
        reply_markup=back_to_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "faq_admin")
async def faq_admin(callback: CallbackQuery):
    await callback.message.edit_text(
        "üõ†Ô∏è <b>–•–æ—á–µ—Ç–µ —â–æ—Å—å –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –±–∞–≥</b>\n\n"
        "–ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä—è–º—É –∞–¥–º—ñ–Ω—É: @cartuuz",
        reply_markup=back_to_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "faq_back")
async def faq_back(callback: CallbackQuery):
    keyboard = faq_main_menu()
    await callback.message.edit_text("‚ùì <b>–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª:</b>", reply_markup=keyboard)
    await callback.answer()

#ADMIN LOGIC
@router.message(F.text == "üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_button(message: Message, is_admin: bool):
    
    from app.keyboards.inline import admin_main_menu
    await message.answer(
        "üîê <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=admin_main_menu()
    )

@router.message(F.text == "üí¨ –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫")
async def start_feedback(message: Message, state: FSMContext):
    await message.answer("üìù –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ:")
    await state.set_state(FeedbackStates.waiting_for_text)


@router.message(FeedbackStates.waiting_for_text)
async def process_feedback_text(message: Message, state: FSMContext, db: Database):
    feedback_text = message.text.strip()

    if not feedback_text:
        await message.answer("‚ùóÔ∏è –í—ñ–¥–≥—É–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    user_id = message.from_user.id

    try:
        await save_feedback(db, user_id, feedback_text)
        await message.answer("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!")
    except Exception as e:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É.")
        print(f"[FEEDBACK ERROR] {e}")

    await state.clear()
