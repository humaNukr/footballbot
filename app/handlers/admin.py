from datetime import time, datetime, timedelta
import calendar

from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.handlers.user import RegisterState
from app.middlewares.admin_check import IsAdmin
from app.keyboards.inline import admin_main_menu, admin_users_menu, admin_back, user_action_menu
from app.db.models import (
    get_all_users, get_users_count, get_user_by_id, search_users,
    make_admin, remove_admin, get_admins, get_stats, log_broadcast, add_schedule
)
from app.services.notify import push_calendar_update
from app.states.register import AdminStates
from app.db.database import Database

router = Router()

router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())

@router.message(F.text == "/admin")
async def admin_menu(message: Message):
    await message.answer(
        "üîê <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=admin_main_menu()
    )

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω–∞
@router.callback_query(F.data == "admin_back")
async def admin_back_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=admin_main_menu()
    )
    await callback.answer()

# –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
@router.callback_query(F.data == "admin_users")
async def admin_users_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏</b>\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=admin_users_menu()
    )
    await callback.answer()

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@router.callback_query(F.data == "admin_user_list")
async def admin_user_list_handler(callback: CallbackQuery, db: Database):
    users = await get_all_users(db)
    total_count = await get_users_count(db)
    
    if not users:
        await callback.message.edit_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>",
            reply_markup=admin_back()
        )
        await callback.answer()
        return
    
    text = f"üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>\n\n"
    
    for user in users:
        telegram_id, username, first_name, is_admin, registered_at = user
        admin_badge = " üëë" if is_admin else ""
        username_text = f"@{username}" if username else "‚Äî"
        text += f"  Name: <b>{first_name}</b>{admin_badge}\n"
        text += f"  ID: <code>{telegram_id}</code>\n"
        text += f"  Username: {username_text}\n\n"
    
    await callback.message.edit_text(text, reply_markup=admin_back())
    await callback.answer()

# –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(F.data == "admin_user_search")
async def admin_user_search_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîç <b>–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
        reply_markup=admin_back()
    )
    await state.set_state(AdminStates.waiting_for_user_search)
    await callback.answer()

@router.message(AdminStates.waiting_for_user_search)
async def process_user_search(message: Message, state: FSMContext, db: Database):
    search_term = message.text.strip()
    users = await search_users(db, search_term)
    
    if not users:
        await message.answer(
            f"üîç –ó–∞ –∑–∞–ø–∏—Ç–æ–º '<b>{search_term}</b>' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=admin_back()
        )
        await state.clear()
        return
    
    text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:</b> '{search_term}'\n\n"
    
    for user in users:
        telegram_id, username, first_name, is_admin, registered_at = user
        admin_badge = " üëë" if is_admin else ""
        username_text = f"@{username}" if username else "‚Äî"
        text += f"  Name: <b>{first_name}</b>{admin_badge}\n"
        text += f"  ID: <code>{telegram_id}</code>\n"
        text += f"  Username: {username_text}\n\n"
    
    await message.answer(text, reply_markup=admin_back())
    await state.clear()

# –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞
@router.callback_query(F.data == "admin_add_admin")
async def admin_add_admin_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üëë <b>–î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∞–¥–º—ñ–Ω–æ–º:",
        reply_markup=admin_back()
    )
    await state.set_state(AdminStates.waiting_for_admin_id)
    await callback.answer()

@router.message(AdminStates.waiting_for_admin_id)
async def process_add_admin(message: Message, state: FSMContext, db: Database):
    telegram_id = message.text.strip()

    try:
        telegram_id = int(telegram_id)
        user = await get_user_by_id(db, telegram_id)

        if not user:
            await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", reply_markup=admin_back())
            await state.clear()
            return

        await make_admin(db, telegram_id)
        await message.answer("‚úÖ –ê–¥–º—ñ–Ω —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π!", reply_markup=admin_back())

    except ValueError:
        await message.answer("‚ùå ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º!", reply_markup=admin_back())

    await state.clear()

# –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞
@router.callback_query(F.data == "admin_remove_admin")
async def admin_remove_admin_handler(callback: CallbackQuery, db: Database, state: FSMContext):
    admins = await get_admins(db)
    
    if len(admins) <= 1:
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞</b>\n\n"
            "–ü–æ–≤–∏–Ω–µ–Ω –∑–∞–ª–∏—à–∏—Ç–∏—Å—è —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞–¥–º—ñ–Ω",
            reply_markup=admin_back()
        )
        await callback.answer()
        return
    
    text = "‚ùå <b>–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤:</b>\n\n"
    for admin in admins:
        telegram_id, username, first_name = admin
        username_text = f"@{username}" if username else "‚Äî"
        text += f" <b>{first_name}</b>\n"
        text += f"  ID: <code>{telegram_id}</code>\n"
        text += f"  Username: {username_text}\n\n"
    
    text += "–í–≤–µ–¥—ñ—Ç—å ID –∞–¥–º—ñ–Ω–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:"
    
    await callback.message.edit_text(text, reply_markup=admin_back())
    await callback.answer()
    await state.set_state(AdminStates.waiting_for_remove_admin_id)



@router.message(AdminStates.waiting_for_remove_admin_id)
async def  delete_admin(message: Message,state: FSMContext, db : Database):
    telegram_id = message.text.strip()

    try:
        telegram_id = int(telegram_id)
        user = await get_user_by_id(db, telegram_id)

        if not user:
            await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", reply_markup=admin_back())
            await state.clear()
            return

        await remove_admin(db, telegram_id)
        await message.answer("‚úÖ –ê–¥–º—ñ–Ω —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π!", reply_markup=admin_back())

    except ValueError:
        await message.answer("‚ùå ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º!", reply_markup=admin_back())

    await state.clear()


@router.callback_query(F.data == "admin_stats", IsAdmin())
async def admin_stats(callback: CallbackQuery, db: Database):
    stats = await get_stats(db)

    text = (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ </b>\n\n"
        f"üë§ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{stats['total_users']}</b>\n"
        f"üõ°Ô∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: <b>{stats['total_admins']}</b>\n"
        f"üìÖ –ù–æ–≤–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: <b>{stats['today_users']}</b>\n"
        f"üí¨ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—ñ–≤: <b>{stats['feedbacks']}</b>"
    )

    await callback.message.edit_text(text, reply_markup=admin_back())
    await callback.answer()


# –†–æ–∑—Å–∏–ª–∫–∞
@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì¢ <b>–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
        reply_markup=admin_back()
    )
    await state.set_state(AdminStates.waiting_for_broadcast_message)
    await callback.answer()

@router.message(AdminStates.waiting_for_broadcast_message)
async def process_broadcast(message: Message, state: FSMContext, db: Database):
    broadcast_text = message.text
    users = await get_all_users(db)

    non_admin_users = [user for user in users if not user[3]]

    if not users:
        await message.answer("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.", reply_markup=admin_back())
        await state.clear()
        return

    success_count = 0
    failed_count = 0

    for user in non_admin_users:
        telegram_id = user[0]
        try:
            await message.bot.send_message(telegram_id, broadcast_text)
            success_count += 1
        except Exception as e:
            print(f"[ERROR] Failed to send message to {telegram_id}: {e}")
            failed_count += 1

    await log_broadcast(db, broadcast_text)

    result_text = f"""üì¢ <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>
    
‚úÖ –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:  <b>{success_count}</b>"""

    await message.answer(result_text, reply_markup=admin_main_menu())
    await state.clear()


def create_calendar(year: int, month: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–∞–ª–µ–Ω–¥–∞—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏"""
    import pytz
    kyiv_tz = pytz.timezone('Europe/Kiev')
    today = datetime.now(kyiv_tz)
    
    # –ù–∞–∑–≤–∏ –º—ñ—Å—è—Ü—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
    months = [
        "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
        "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
    ]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä
    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –º—ñ—Å—è—Ü–µ–º —Ç–∞ —Ä–æ–∫–æ–º
    keyboard.append([
        InlineKeyboardButton(
            text=f"{months[month-1]} {year}", 
            callback_data="ignore"
        )
    ])
    
    # –î–Ω—ñ —Ç–∏–∂–Ω—è
    keyboard.append([
        InlineKeyboardButton(text="–ü–Ω", callback_data="ignore"),
        InlineKeyboardButton(text="–í—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–°—Ä", callback_data="ignore"),
        InlineKeyboardButton(text="–ß—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–ü—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–°–±", callback_data="ignore"),
        InlineKeyboardButton(text="–ù–¥", callback_data="ignore"),
    ])
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä –¥–ª—è –º—ñ—Å—è—Ü—è
    month_calendar = calendar.monthcalendar(year, month)
    
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—Ç–∞ –Ω–µ –≤ –º–∏–Ω—É–ª–æ–º—É
                date_obj = datetime(year, month, day)
                if date_obj < today.replace(hour=0, minute=0, second=0, microsecond=0):
                    row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
                else:
                    row.append(InlineKeyboardButton(
                        text=str(day), 
                        callback_data=f"calendar_day_{year}_{month}_{day}"
                    ))
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    prev_month = month - 1
    prev_year = year
    if prev_month == 0:
        prev_month = 12
        prev_year -= 1
        
    next_month = month + 1
    next_year = year
    if next_month == 13:
        next_month = 1
        next_year += 1
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚óÄÔ∏è", 
            callback_data=f"calendar_prev_{prev_year}_{prev_month}"
        ),
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", 
            callback_data="admin_back"
        ),
        InlineKeyboardButton(
            text="‚ñ∂Ô∏è", 
            callback_data=f"calendar_next_{next_year}_{next_month}"
        ),
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == "admin_plan_game")
async def admin_game_handler(callback: CallbackQuery, state: FSMContext):
    import pytz
    kyiv_tz = pytz.timezone('Europe/Kiev')
    today = datetime.now(kyiv_tz)
    await callback.message.edit_text(
        "üìÖ <b>–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≥—Ä—É</b>\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –≥—Ä–∏:",
        reply_markup=create_calendar(today.year, today.month)
    )
    await state.set_state(AdminStates.waiting_for_game_date)
    await callback.answer()

@router.callback_query(F.data.startswith("calendar_day_"))
async def process_calendar_day(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–Ω—è"""
    _, _, year, month, day = callback.data.split("_")
    date_obj = datetime(int(year), int(month), int(day))
    
    await state.update_data(game_date=date_obj.strftime("%Y-%m-%d"))
    await callback.message.edit_text(
        f"‚úÖ –í–∏–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: <b>{date_obj.strftime('%d.%m.%Y')}</b>\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –≥—Ä–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 18:30):",
        reply_markup=admin_back()
    )
    await state.set_state(AdminStates.waiting_for_game_time)
    await callback.answer()

@router.callback_query(F.data.startswith("calendar_prev_"))
async def process_calendar_prev(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º—ñ—Å—è—Ü—è"""
    _, _, year, month = callback.data.split("_")
    await callback.message.edit_reply_markup(
        reply_markup=create_calendar(int(year), int(month))
    )
    await callback.answer()

@router.callback_query(F.data.startswith("calendar_next_"))
async def process_calendar_next(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è"""
    _, _, year, month = callback.data.split("_")
    await callback.message.edit_reply_markup(
        reply_markup=create_calendar(int(year), int(month))
    )
    await callback.answer()

@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    """–Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()

@router.message(AdminStates.waiting_for_game_time)
async def process_game_time(message: Message, state: FSMContext, db: Database):
    time = message.text.strip()

    try:
        hour, minute = map(int, time.split(':'))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError

        state_data = await state.get_data()
        game_date = state_data['game_date']
        # Store time in state
        await state.update_data(game_time=f"{hour:02d}:{minute:02d}")

        await message.answer(
            f"‚úÖ –ì—Ä—É –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ <b>{game_date}</b> –æ <b>{time}</b>\n"
            f"–í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:",
            reply_markup=admin_back()
        )
        await state.set_state(AdminStates.waiting_for_additional_info)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 18:30):",
            reply_markup=admin_back()
        )

@router.message(AdminStates.waiting_for_additional_info)
async def process_additional_info(message: Message, state: FSMContext, db: Database):
    additional_info = message.text.strip()
    state_data = await state.get_data()
    game_date = state_data['game_date']
    game_time = state_data['game_time']
    user_id = message.from_user.id

    await add_schedule(db, user_id, game_date, game_time, additional_info)

    await push_calendar_update(message, state, db)

    await message.answer(
        "‚úÖ –ì—Ä—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ!\n"
        f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {game_date} {game_time}\n"
        f"–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {additional_info}",
        reply_markup=admin_main_menu()
    )

    await state.clear()



# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
@router.callback_query(F.data == "admin_settings")
async def admin_settings_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n"
        "–¶–µ–π —Ä–æ–∑–¥—ñ–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...",
        reply_markup=admin_back()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_feedbacks", IsAdmin())
async def view_feedbacks(callback: CallbackQuery, db: Database):
    query = """
            SELECT first_name, username, feedback_text, created_at
            FROM feedback
            ORDER BY created_at DESC
            """
    feedbacks = await db.fetchall(query)

    if not feedbacks:
        await callback.message.answer("üì≠ –í—ñ–¥–≥—É–∫—ñ–≤ —â–µ –Ω–µ–º–∞—î.")
        return

    text = "<b>üí¨ –û—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n\n"
    for first_name, username, fb_text, created_at in feedbacks:
        text += (
            f"üë§ <b>{first_name}</b> (@{username})\n"
            f"üïí {created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"üí¨ {fb_text}\n\n"
        )

    await callback.message.answer(text, reply_markup=admin_back())
