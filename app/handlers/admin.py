from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.middlewares.admin_check import IsAdmin
from app.keyboards.inline import admin_main_menu, admin_users_menu, admin_back, user_action_menu
from app.db.models import (
    get_all_users, get_users_count, get_user_by_id, search_users,
    make_admin, remove_admin, get_admins, get_stats
)
from app.states.register import AdminStates
from app.db.database import Database

router = Router()

router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())

@router.message(F.text == "/admin")
async def admin_menu(message: Message):
    await message.answer(
        "üîê <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=admin_main_menu()
    )

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω–∞
@router.callback_query(F.data == "admin_back")
async def admin_back_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=admin_main_menu()
    )
    await callback.answer()

# –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
@router.callback_query(F.data == "admin_users")
async def admin_users_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏</b>\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=admin_users_menu()
    )
    await callback.answer()

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@router.callback_query(F.data == "admin_user_list")
async def admin_user_list_handler(callback: CallbackQuery, db: Database):
    users = await get_all_users(db, limit=10)
    total_count = await get_users_count(db)
    
    if not users:
        await callback.message.edit_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>",
            reply_markup=admin_back()
        )
        await callback.answer()
        return
    
    text = f"üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b> (–ø–æ–∫–∞–∑–∞–Ω–æ 10 –∑ {total_count})\n\n"
    
    for user in users:
        telegram_id, username, first_name, is_admin, created_at = user
        admin_badge = " üëë" if is_admin else ""
        username_text = f"@{username}" if username else "‚Äî"
        text += f"‚Ä¢ <b>{first_name}</b>{admin_badge}\n"
        text += f"  ID: <code>{telegram_id}</code>\n"
        text += f"  Username: {username_text}\n\n"
    
    await callback.message.edit_text(text, reply_markup=admin_back())
    await callback.answer()

# –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(F.data == "admin_user_search")
async def admin_user_search_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîç <b>–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
        reply_markup=admin_back()
    )
    await state.set_state(AdminStates.waiting_for_user_search)
    await callback.answer()

@router.message(AdminStates.waiting_for_user_search)
async def process_user_search(message: Message, state: FSMContext, db: Database):
    search_term = message.text.strip()
    users = await search_users(db, search_term)
    
    if not users:
        await message.answer(
            f"üîç –ó–∞ –∑–∞–ø–∏—Ç–æ–º '<b>{search_term}</b>' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=admin_back()
        )
        await state.clear()
        return
    
    text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:</b> '{search_term}'\n\n"
    
    for user in users:
        telegram_id, username, first_name, is_admin, created_at = user
        admin_badge = " üëë" if is_admin else ""
        username_text = f"@{username}" if username else "‚Äî"
        text += f"‚Ä¢ <b>{first_name}</b>{admin_badge}\n"
        text += f"  ID: <code>{telegram_id}</code>\n"
        text += f"  Username: {username_text}\n\n"
    
    await message.answer(text, reply_markup=admin_back())
    await state.clear()

# –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞
@router.callback_query(F.data == "admin_add_admin")
async def admin_add_admin_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üëë <b>–î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∞–¥–º—ñ–Ω–æ–º:",
        reply_markup=admin_back()
    )
    await state.set_state(AdminStates.waiting_for_admin_id)
    await callback.answer()

@router.message(AdminStates.waiting_for_admin_id)
async def process_add_admin(message: Message, state: FSMContext, db: Database):
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π Telegram ID:",
            reply_markup=admin_back()
        )
        return
    
    user = await get_user_by_id(db, user_id)
    if not user:
        await message.answer(
            f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID <code>{user_id}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö",
            reply_markup=admin_back()
        )
        await state.clear()
        return
    
    telegram_id, username, first_name, is_admin, created_at = user
    
    if is_admin:
        await message.answer(
            f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <b>{first_name}</b> (<code>{user_id}</code>) –≤–∂–µ —î –∞–¥–º—ñ–Ω–æ–º",
            reply_markup=admin_back()
        )
        await state.clear()
        return
    
    await make_admin(db, user_id)
    await message.answer(
        f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <b>{first_name}</b> (<code>{user_id}</code>) —Ç–µ–ø–µ—Ä –∞–¥–º—ñ–Ω!",
        reply_markup=admin_back()
    )
    await state.clear()

# –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞
@router.callback_query(F.data == "admin_remove_admin")
async def admin_remove_admin_handler(callback: CallbackQuery, db: Database):
    admins = await get_admins(db)
    
    if len(admins) <= 1:
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞</b>\n\n"
            "–ü–æ–≤–∏–Ω–µ–Ω –∑–∞–ª–∏—à–∏—Ç–∏—Å—è —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞–¥–º—ñ–Ω",
            reply_markup=admin_back()
        )
        await callback.answer()
        return
    
    text = "‚ùå <b>–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤:</b>\n\n"
    for admin in admins:
        telegram_id, username, first_name = admin
        username_text = f"@{username}" if username else "‚Äî"
        text += f"‚Ä¢ <b>{first_name}</b>\n"
        text += f"  ID: <code>{telegram_id}</code>\n"
        text += f"  Username: {username_text}\n\n"
    
    text += "–í–≤–µ–¥—ñ—Ç—å ID –∞–¥–º—ñ–Ω–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:"
    
    await callback.message.edit_text(text, reply_markup=admin_back())
    await callback.answer()
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è ID
    state = callback.message.bot.get("state_manager")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery, db: Database):
    stats = await get_stats(db)
    
    text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç—É</b>

üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{stats['total_users']}</b>
üëë –ê–¥–º—ñ–Ω—ñ–≤: <b>{stats['total_admins']}</b>
üìÖ –ù–æ–≤–∏—Ö –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: <b>{stats['today_users']}</b>"""
    
    await callback.message.edit_text(text, reply_markup=admin_back())
    await callback.answer()

# –†–æ–∑—Å–∏–ª–∫–∞
@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì¢ <b>–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
        reply_markup=admin_back()
    )
    await state.set_state(AdminStates.waiting_for_broadcast_message)
    await callback.answer()

@router.message(AdminStates.waiting_for_broadcast_message)
async def process_broadcast(message: Message, state: FSMContext, db: Database):
    broadcast_text = message.text
    users = await get_all_users(db, limit=1000)  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
    success_count = 0
    failed_count = 0
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    for user in users:
        telegram_id = user[0]
        try:
            await message.bot.send_message(telegram_id, broadcast_text)
            success_count += 1
        except Exception:
            failed_count += 1
    
    result_text = f"""üì¢ <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

‚úÖ –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: <b>{success_count}</b>
‚ùå –ü–æ–º–∏–ª–æ–∫: <b>{failed_count}</b>
üìä –í—Å—å–æ–≥–æ —Å–ø—Ä–æ–±: <b>{success_count + failed_count}</b>"""
    
    await message.answer(result_text, reply_markup=admin_main_menu())
    await state.clear()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
@router.callback_query(F.data == "admin_settings")
async def admin_settings_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n"
        "–¶–µ–π —Ä–æ–∑–¥—ñ–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...",
        reply_markup=admin_back()
    )
    await callback.answer()
